{"version":3,"sources":["Components/CategoryBar/CategoryBar.js","Views/Polls/Polls.js"],"names":["CategoryBar","cats","onChange","checkChecked","className","Group","style","width","map","p","display","value","connect","state","english","useState","selectedTags","setSelectedTags","pollsBasedOnCategory","setPollsBasedOnCategory","page","setPage","TabPane","Tabs","useEffect","fetchPollsSelected","a","queryParam","join","axios","get","params","categories","length","undefined","response","responseJSON","data","console","log","getExpiryString","expiryTime","lifeEndTime","moment","now","duration","diff","difference","Math","floor","asDays","minDiff","asMinutes","asHours","PollView","type","type2","useData","Object","keys","payload","filter","lifeSpan","margin","slice","hidden","icons","onClick","changePage","checkedValues","item","bool","indexOf","backgroundColor","color","catspa","size","defaultActiveKey","checkLength","key","tab"],"mappings":"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","file":"static/js/8.d7ae7aa4.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Checkbox} from 'antd'\r\n\r\nconst CategoryBar = ({cats,onChange,checkChecked}) => {\r\n  return (\r\n    <div className='section-news-left--tags  news-tags'>\r\n    <Checkbox.Group\r\n    className='tags'\r\n    style={{ width: '100%' }}\r\n    onChange={onChange}\r\n  >\r\n    {cats.map((p) => (\r\n      <label className=\"cat cur\" style={checkChecked(p)}>\r\n        {p}\r\n        <Checkbox style={{ display: 'none' }} value={p}></Checkbox>\r\n      </label>\r\n    ))}\r\n  </Checkbox.Group>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default CategoryBar\r\n","import React, { useState, useEffect } from 'react';\r\nimport CategoryBar from '../../Components/CategoryBar/CategoryBar';\r\nimport { cats,catspa } from '../../Components/icons/Icons';\r\nimport { Tabs } from 'antd';\r\nimport axios from '../../axios';\r\nimport moment from 'moment';\r\nimport PollCard from '../../Components/Polls/PollCard';\r\nimport { icons } from '../../Components/icons/Icons';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst Polls = ({english:{english}}) => {\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [pollsBasedOnCategory, setPollsBasedOnCategory] = useState({});\r\n  const [page,setPage]=useState(1)\r\n\r\n\r\n  const { TabPane } = Tabs;\r\n  useEffect(() => {\r\n    fetchPollsSelected();\r\n  }, [english]);\r\n\r\n  useEffect(() => {\r\n    fetchPollsSelected();\r\n  }, [selectedTags]);\r\n\r\n  const fetchPollsSelected = async (page) => {\r\n    const queryParam = selectedTags.join(',');\r\n    try {\r\n      const response = await axios.get(`/common/polls?hindi=${!english}`, {\r\n        params: {\r\n          page,\r\n          categories: selectedTags.length > 0 ? queryParam : undefined,\r\n        },\r\n      });\r\n      const responseJSON = response.data;\r\n      setPollsBasedOnCategory(responseJSON);\r\n\r\n      console.log(responseJSON, 'selected news');\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  function callback(key) {\r\n    console.log(key);\r\n  }\r\n  function onChange(checkedValues) {\r\n    console.log('checked = ', checkedValues);\r\n    setSelectedTags(checkedValues);\r\n  }\r\n  const checkChecked = (item) => {\r\n    console.log(selectedTags);\r\n    const bool = selectedTags.indexOf(item);\r\n    console.log(bool);\r\n    if (bool !== -1) {\r\n      return {\r\n        backgroundColor: '#a62844',\r\n        color: 'white',\r\n      };\r\n    }\r\n  };\r\n\r\n  const getExpiryString = (expiryTime) => {\r\n    const lifeEndTime = moment(expiryTime);\r\n    const now = moment();\r\n    let duration = moment.duration(lifeEndTime.diff(now));\r\n    let difference = Math.floor(duration.asDays());\r\n    let minDiff = Math.floor(duration.asMinutes());\r\n    console.log(minDiff, 'diff');\r\n\r\n    let unit = 'days';\r\n    if (difference < 1) {\r\n      difference = Math.floor(duration.asHours());\r\n      unit = 'hours';\r\n    }\r\n    if (difference < 1) {\r\n      difference = Math.floor(duration.asMinutes());\r\n      unit = 'minutes';\r\n    }\r\n    return minDiff;\r\n  };\r\n\r\n  const checkLength=(data,type)=>{\r\n\r\n    let useData=[]\r\n    if(type==='polls'){\r\n    useData =\r\n    Object.keys(data).length>0 &&\r\n    data.payload.payload.filter((p) => {\r\n      return getExpiryString(p.lifeSpan) > 0;\r\n    });\r\n  console.log(useData);\r\n  return useData.length;\r\n  }\r\n\r\n  }\r\n\r\n  const PollView = (data, type, type2) => {\r\n    let useData;\r\n    if (type === 'active') {\r\n      useData =\r\n        Object.keys(data).length > 0 &&\r\n        data.payload.payload.filter((p) => {\r\n          return getExpiryString(p.lifeSpan) > 0;\r\n        });\r\n      console.log(useData);\r\n    } else if (type === 'expired') {\r\n      useData =\r\n        Object.keys(data).length > 0 &&\r\n        data.payload.payload.filter((p) => {\r\n          return getExpiryString(p.lifeSpan) < 0;\r\n        });\r\n      console.log(useData);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div style={{ margin: '1.5rem 0' }}>\r\n{  /*        <span>{useData.length + ' ' + type + ' ' + type2}</span>\r\n    */}        </div>\r\n        <div className='pollCont'>\r\n          {useData &&\r\n            useData.slice(0,10*page).map(\r\n              (p) =>\r\n                p.hidden === false && (\r\n                  <PollCard english={english} icons={icons} type2={type2} p={p} type={type}/>\r\n                )\r\n            )}\r\n        </div>\r\n        \r\n        {useData && useData.length>page*10&&<center><button className=\"loadmore\" onClick={changePage}>Load more</button></center>}\r\n      </>\r\n    );\r\n  };\r\n  const changePage=()=>{\r\n    setPage(page+1)\r\n  }\r\n  return (\r\n    <div className='poll-box'>\r\n      <div>\r\n        {/*<h1>Polls</h1>*/}\r\n        <div>\r\n          <CategoryBar\r\n            onChange={onChange}\r\n            checkChecked={checkChecked}\r\n            cats={catspa}\r\n          />\r\n          <Tabs size={'large'} defaultActiveKey={checkLength(pollsBasedOnCategory,'polls')===0?'1':'2'} onChange={callback} type='card'>\r\n            <TabPane tab='Active' key='1'>\r\n              {PollView(pollsBasedOnCategory, 'active', 'polls')}\r\n            </TabPane>\r\n            <TabPane tab='Expired' key='2'>\r\n              {PollView(pollsBasedOnCategory, 'expired', 'polls')}\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  english:state.english\r\n});\r\n\r\nexport default connect(mapStateToProps)(Polls);"],"sourceRoot":""}